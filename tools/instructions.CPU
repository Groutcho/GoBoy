ld   A, B            78              4    ----     // A=B
ld   A, C            79              4    ----     // A=C
ld   A, D            7A              4    ----     // A=D
ld   A, E            7B              4    ----     // A=E
ld   A, H            7C              4    ----     // A=H
ld   A, L            7D              4    ----     // A=L
ld   A, A            7F              4    ----     // A=A

ld   A, %1           3E              8    ----     // A=%1
ld   B, %1           06              8    ----     // B=%1
ld   C, %1           0E              8    ----     // C=%1
ld   D, %1           16              8    ----     // D=%1
ld   E, %1           1E              8    ----     // E=%1
ld   H, %1           26              8    ----     // H=%1
ld   L, %1           2E              8    ----     // L=%1

ld   A, (HL)         7E              8    ----     // A=(HL)
ld   B, (HL)         46              8    ----     // B=(HL)
ld   C, (HL)         4E              8    ----     // C=(HL)
ld   D, (HL)         56              8    ----     // D=(HL)
ld   E, (HL)         5E              8    ----     // E=(HL)
ld   H, (HL)         66              8    ----     // H=(HL)
ld   L, (HL)         6E              8    ----     // L=(HL)

ld   (HL), B         70              8    ----     // [HL]=B
ld   (HL), C         71              8    ----     // [HL]=C
ld   (HL), D         72              8    ----     // [HL]=D
ld   (HL), E         73              8    ----     // [HL]=E
ld   (HL), H         74              8    ----     // [HL]=H
ld   (HL), L         75              8    ----     // [HL]=L
ld   (HL), A         77              8    ----     // [HL]=A
ld   (HL), %1        36             12    ----     // [HL]=[NN]

ld   A, (BC)         0A              8    ----     // A=[BC]
ld   A, (DE)         1A              8    ----     // A=[DE]
ld   A, (%2)         FA             16    ----     // A=[NN]
ld   (BC), A         02              8    ----     // [BC]=A
ld   (DE), A         12              8    ----     // [DE]=A
ld   (%2), A         EA             16    ----     // [NN]=A
ld   A, (FF00+%1)    F0             12    ----     // *read from io-port %1 (memory FF00+%1)
ld   (FF00+%1), A    E0             12    ----     // *write to io-port %1 (memory FF00+%1)
ld   A, (FF00+C)     F2              8    ----     // *read from io-port C (memory FF00+C)
ld   (FF00+C), A     E2              8    ----     // *write to io-port C (memory FF00+C)
ld   BC, %2          01             12    ----     // BC=%2

ld   DE, %2          11             12    ----     // DE=%2
ld   HL, %2          21             12    ----     // HL=%2
ld   SP, %2          31             12    ----     // SP=%2
ld   SP, HL          F9              8    ----     // SP=HL
ld   HL, SP+%s       F8             12    00hc     // *HL = SP +/- %s ;%s is 8bit signed number

ldi  (HL), A         22              8    ----     // (HL)=A, HL=HL+1
ldi  A, (HL)         2A              8    ----     // A=(HL), HL=HL+1
ldd  (HL), A         32              8    ----     // (HL)=A, HL=HL-1
ldd  A, (HL)         3A              8    ----     // A=(HL), HL=HL-1

push BC              C5             16    ----     // SP=SP-2,  (SP)=BC
push DE              D5             16    ----     // SP=SP-2,  (SP)=DE
push HL              E5             16    ----     // SP=SP-2,  (SP)=HL
push AF              F5             16    ----     // SP=SP-2,  (SP)=AF

pop  AF              F1             12    (AF)     // AF=(SP),  SP=SP+2
pop  BC              C1             12    (AF)     // BC=(SP),  SP=SP+2
pop  DE              D1             12    (AF)     // DE=(SP),  SP=SP+2
pop  HL              E1             12    (AF)     // HL=(SP),  SP=SP+2

add  A, B            80              4    z0hc     // A=A+B
add  A, C            81              4    z0hc     // A=A+C
add  A, D            82              4    z0hc     // A=A+D
add  A, E            83              4    z0hc     // A=A+E
add  A, H            84              4    z0hc     // A=A+H
add  A, L            85              4    z0hc     // A=A+L
add  A, (HL)         86              8    z0hc     // A=A+(HL)
add  A, A            87              4    z0hc     // A=A+A
add  A, %1           C6              8    z0hc     // A=A+%1

add  HL, BC          09              8    -0hc     // HL = HL+BC
add  HL, DE          19              8    -0hc     // HL = HL+DE
add  HL, HL          29              8    -0hc     // HL = HL+HL
add  HL, SP          39              8    -0hc     // HL = HL+SP
add  SP, %s          E8             16    00hc     // *SP = SP +/- %s ;%s is 8bit signed number

adc  A, B            88              4    z0hc     // A=A+B+cy
adc  A, C            89              4    z0hc     // A=A+C+cy
adc  A, D            8A              4    z0hc     // A=A+D+cy
adc  A, E            8B              4    z0hc     // A=A+E+cy
adc  A, H            8C              4    z0hc     // A=A+H+cy
adc  A, L            8D              4    z0hc     // A=A+L+cy
adc  A, (HL)         8E              8    z0hc     // A=A+(HL)+cy
adc  A, A            8F              4    z0hc     // A=A+A+cy
adc  A, %1           CE              8    z0hc     // A=A+%1+cy

sub  B               90              4    z1hc     // A=A-B
sub  C               91              4    z1hc     // A=A-C
sub  D               92              4    z1hc     // A=A-D
sub  E               93              4    z1hc     // A=A-E
sub  H               94              4    z1hc     // A=A-H
sub  L               95              4    z1hc     // A=A-L
sub  (HL)            96              8    z1hc     // A=A-(HL)
sub  A               97              4    z1hc     // A=A-A
sub  %1              D6              8    z1hc     // A=A-%1

sbc  A, B            98              4    z1hc     // A=A-B-cy
sbc  A, C            99              4    z1hc     // A=A-C-cy
sbc  A, D            9A              4    z1hc     // A=A-D-cy
sbc  A, E            9B              4    z1hc     // A=A-E-cy
sbc  A, H            9C              4    z1hc     // A=A-H-cy
sbc  A, L            9D              4    z1hc     // A=A-L-cy
sbc  A, (HL)         9E              8    z1hc     // A=A-(HL)-cy
sbc  A, A            9F              4    z1hc     // A=A-A-cy
sbc  A, %1           DE              8    z1hc     // A=A-%1-cy

and  B               A0              4    z010     // A=A & B
and  C               A1              4    z010     // A=A & C
and  D               A2              4    z010     // A=A & D
and  E               A3              4    z010     // A=A & E
and  H               A4              4    z010     // A=A & H
and  L               A5              4    z010     // A=A & L
and  (HL)            A6              8    z010     // A=A & (HL)
and  A               A7              4    z010     // A=A & A
and  %1              E6              8    z010     // A=A & %1

xor  B               A8              4    z000     // A=A^B
xor  C               A9              4    z000     // A=A^C
xor  D               AA              4    z000     // A=A^D
xor  E               AB              4    z000     // A=A^E
xor  H               AC              4    z000     // A=A^H
xor  L               AD              4    z000     // A=A^L
xor  (HL)            AE              8    z000     // A=A^[HL]
xor  A               AF              4    z000     // A=A^A
xor  %1              EE              8    z000     // A=A^%1

or   B               B0              4    z000     // A=A | B
or   C               B1              4    z000     // A=A | C
or   D               B2              4    z000     // A=A | D
or   E               B3              4    z000     // A=A | E
or   H               B4              4    z000     // A=A | H
or   L               B5              4    z000     // A=A | L
or   A               B7              4    z000     // A=A | A
or   (HL)            B6              8    z000     // A=A | (HL)
or   %1              F6              8    z000     // A=A | %1

cp   B               B8              4    z1hc     // compare A-B
cp   C               B9              4    z1hc     // compare A-C
cp   D               BA              4    z1hc     // compare A-D
cp   E               BB              4    z1hc     // compare A-E
cp   H               BC              4    z1hc     // compare A-H
cp   L               BD              4    z1hc     // compare A-L
cp   (HL)            BE              8    z1hc     // compare A-(HL)
cp   A               BF              4    z1hc     // compare A-A
cp   %1              FE              8    z1hc     // compare A-%1

inc  A               3C              4    z0h-     // A = A+1
inc  B               04              4    z0h-     // B = B+1
inc  C               0C              4    z0h-     // C = C+1
inc  D               14              4    z0h-     // D = D+1
inc  E               1C              4    z0h-     // E = E+1
inc  H               24              4    z0h-     // H = H+1
inc  L               2C              4    z0h-     // L = L+1
inc  (HL)            34             12    z0h-     // (HL)=(HL)+1

inc  BC              03              8    ----     // BC = BC+1
inc  DE              13              8    ----     // DE = DE+1
inc  HL              23              8    ----     // HL = HL+1
inc  SP              33              8    ----     // SP = SP+1

dec  A               3D              4    z1h-     // A = A-1
dec  B               05              4    z1h-     // B = B-1
dec  C               0D              4    z1h-     // C = C-1
dec  D               15              4    z1h-     // D = D-1
dec  E               1D              4    z1h-     // E = E-1
dec  H               25              4    z1h-     // H = H-1
dec  L               2D              4    z1h-     // L = L-1
dec  (HL)            35             12    z1h-     // (HL)=(HL)-1

dec  BC              0B              8    ----     // BC = BC-1
dec  DE              1B              8    ----     // DE = DE-1
dec  HL              2B              8    ----     // HL = HL-1
dec  SP              3B              8    ----     // SP = SP-1

daa                  27              4    z-0x     // *A=adjust result to BCD-format
cpl                  2F              4    -11-     // *A = A ^ FF

rlca                 07              4    000c     // *rotate accumulator left
rla                  17              4    000c     // *rotate accumulator left through carry
rrca                 0F              4    000c     // *rotate accumulator right
rra                  1F              4    000c     // *rotate accumulator right through carry

rlc  B               CB 00           8    z00c     // *rotate B left
rlc  C               CB 01           8    z00c     // *rotate C left
rlc  D               CB 02           8    z00c     // *rotate D left
rlc  E               CB 03           8    z00c     // *rotate E left
rlc  H               CB 04           8    z00c     // *rotate H left
rlc  L               CB 05           8    z00c     // *rotate L left
rlc  (HL)            CB 06          16    z00c     // *rotate [HL] left
rlc  A               CB 07           8    z00c     // *rotate A left

rl   B               CB 10           8    z00c     // *rotate B left through carry
rl   C               CB 11           8    z00c     // *rotate C left through carry
rl   D               CB 12           8    z00c     // *rotate D left through carry
rl   E               CB 13           8    z00c     // *rotate E left through carry
rl   H               CB 14           8    z00c     // *rotate H left through carry
rl   L               CB 15           8    z00c     // *rotate L left through carry
rl   (HL)            CB 16          16    z00c     // *rotate [HL] left through carry
rl   A               CB 17           8    z00c     // *rotate A left through carry

rrc  B               CB 08           8    z00c     // *rotate B right
rrc  C               CB 09           8    z00c     // *rotate C right
rrc  D               CB 0A           8    z00c     // *rotate D right
rrc  E               CB 0B           8    z00c     // *rotate E right
rrc  H               CB 0C           8    z00c     // *rotate H right
rrc  L               CB 0D           8    z00c     // *rotate L right
rrc  (HL)            CB 0E          16    z00c     // *rotate [HL] right
rrc  A               CB 0F           8    z00c     // *rotate A right

rr   B               CB 18           8    z00c     // *rotate B right through carry
rr   C               CB 19           8    z00c     // *rotate C right through carry
rr   D               CB 1A           8    z00c     // *rotate D right through carry
rr   E               CB 1B           8    z00c     // *rotate E right through carry
rr   H               CB 1C           8    z00c     // *rotate H right through carry
rr   L               CB 1D           8    z00c     // *rotate L right through carry
rr   (HL)            CB 1E          16    z00c     // *rotate [HL] right through carry
rr   A               CB 1F           8    z00c     // *rotate A right through carry

sla  B               CB 20           8    z00c     // shift B left arithmetic (b0=0)
sla  C               CB 21           8    z00c     // shift C left arithmetic (b0=0)
sla  D               CB 22           8    z00c     // shift D left arithmetic (b0=0)
sla  E               CB 23           8    z00c     // shift E left arithmetic (b0=0)
sla  H               CB 24           8    z00c     // shift H left arithmetic (b0=0)
sla  L               CB 25           8    z00c     // shift L left arithmetic (b0=0)
sla  (HL)            CB 26          16    z00c     // shift left arithmetic (b0=0)
sla  A               CB 27           8    z00c     // shift A left arithmetic (b0=0)

swap B               CB 30           8    z000     // exchange B low/hi-nibble
swap C               CB 31           8    z000     // exchange C low/hi-nibble
swap D               CB 32           8    z000     // exchange D low/hi-nibble
swap E               CB 33           8    z000     // exchange E low/hi-nibble
swap H               CB 34           8    z000     // exchange H low/hi-nibble
swap L               CB 35           8    z000     // exchange L low/hi-nibble
swap (HL)            CB 36          16    z000     // exchange [HL] low/hi-nibble
swap A               CB 37           8    z000     // exchange A low/hi-nibble

sra  B               CB 28           8    z00c     // shift B right arithmetic (b7=b7)
sra  C               CB 29           8    z00c     // shift C right arithmetic (b7=b7)
sra  D               CB 2A           8    z00c     // shift D right arithmetic (b7=b7)
sra  E               CB 2B           8    z00c     // shift E right arithmetic (b7=b7)
sra  H               CB 2C           8    z00c     // shift H right arithmetic (b7=b7)
sra  L               CB 2D           8    z00c     // shift L right arithmetic (b7=b7)
sra  (HL)            CB 2E          16    z00c     // shift [HL] right arithmetic (b7=b7)
sra  A               CB 2F           8    z00c     // shift A right arithmetic (b7=b7)

srl  B               CB 38           8    z00c     // shift B right logical (b7=0)
srl  C               CB 39           8    z00c     // shift C right logical (b7=0)
srl  D               CB 3A           8    z00c     // shift D right logical (b7=0)
srl  E               CB 3B           8    z00c     // shift E right logical (b7=0)
srl  H               CB 3C           8    z00c     // shift H right logical (b7=0)
srl  L               CB 3D           8    z00c     // shift L right logical (b7=0)
srl  (HL)            CB 3E          16    z00c     // shift right logical (b7=0)
srl  A               CB 3F           8    z00c     // shift A right logical (b7=0

bit  0, B            CB 40           8    z01-     // test bit 0 of register B
bit  1, B            CB 48           8    z01-     // test bit 1 of register B
bit  2, B            CB 50           8    z01-     // test bit 2 of register B
bit  3, B            CB 58           8    z01-     // test bit 3 of register B
bit  4, B            CB 60           8    z01-     // test bit 4 of register B
bit  5, B            CB 68           8    z01-     // test bit 5 of register B
bit  6, B            CB 70           8    z01-     // test bit 6 of register B
bit  7, B            CB 78           8    z01-     // test bit 7 of register B
bit  0, C            CB 41           8    z01-     // test bit 0 of register C
bit  1, C            CB 49           8    z01-     // test bit 1 of register C
bit  2, C            CB 51           8    z01-     // test bit 2 of register C
bit  3, C            CB 59           8    z01-     // test bit 3 of register C
bit  4, C            CB 61           8    z01-     // test bit 4 of register C
bit  5, C            CB 69           8    z01-     // test bit 5 of register C
bit  6, C            CB 71           8    z01-     // test bit 6 of register C
bit  7, C            CB 79           8    z01-     // test bit 7 of register C
bit  0, D            CB 42           8    z01-     // test bit 0 of register D
bit  1, D            CB 4A           8    z01-     // test bit 1 of register D
bit  2, D            CB 52           8    z01-     // test bit 2 of register D
bit  3, D            CB 5A           8    z01-     // test bit 3 of register D
bit  4, D            CB 62           8    z01-     // test bit 4 of register D
bit  5, D            CB 6A           8    z01-     // test bit 5 of register D
bit  6, D            CB 72           8    z01-     // test bit 6 of register D
bit  7, D            CB 7A           8    z01-     // test bit 7 of register D
bit  0, E            CB 43           8    z01-     // test bit 0 of register E
bit  1, E            CB 4B           8    z01-     // test bit 1 of register E
bit  2, E            CB 53           8    z01-     // test bit 2 of register E
bit  3, E            CB 5B           8    z01-     // test bit 3 of register E
bit  4, E            CB 63           8    z01-     // test bit 4 of register E
bit  5, E            CB 6B           8    z01-     // test bit 5 of register E
bit  6, E            CB 73           8    z01-     // test bit 6 of register E
bit  7, E            CB 7B           8    z01-     // test bit 7 of register E
bit  0, H            CB 44           8    z01-     // test bit 0 of register H
bit  1, H            CB 4C           8    z01-     // test bit 1 of register H
bit  2, H            CB 54           8    z01-     // test bit 2 of register H
bit  3, H            CB 5C           8    z01-     // test bit 3 of register H
bit  4, H            CB 64           8    z01-     // test bit 4 of register H
bit  5, H            CB 6C           8    z01-     // test bit 5 of register H
bit  6, H            CB 74           8    z01-     // test bit 6 of register H
bit  7, H            CB 7C           8    z01-     // test bit 7 of register H
bit  0, L            CB 45           8    z01-     // test bit 0 of register L
bit  1, L            CB 4D           8    z01-     // test bit 1 of register L
bit  2, L            CB 55           8    z01-     // test bit 2 of register L
bit  3, L            CB 5D           8    z01-     // test bit 3 of register L
bit  4, L            CB 65           8    z01-     // test bit 4 of register L
bit  5, L            CB 6D           8    z01-     // test bit 5 of register L
bit  6, L            CB 75           8    z01-     // test bit 6 of register L
bit  7, L            CB 7D           8    z01-     // test bit 7 of register L
bit  0, A            CB 47           8    z01-     // test bit 0 of register A
bit  1, A            CB 4F           8    z01-     // test bit 1 of register A
bit  2, A            CB 57           8    z01-     // test bit 2 of register A
bit  3, A            CB 5F           8    z01-     // test bit 3 of register A
bit  4, A            CB 67           8    z01-     // test bit 4 of register A
bit  5, A            CB 6F           8    z01-     // test bit 5 of register A
bit  6, A            CB 77           8    z01-     // test bit 6 of register A
bit  7, A            CB 7F           8    z01-     // test bit 7 of register A

bit  0, (HL)         CB 46          12    z01-     // [HL] & {2^0}
bit  1, (HL)         CB 4E          12    z01-     // [HL] & {2^1}
bit  2, (HL)         CB 56          12    z01-     // [HL] & {2^2}
bit  3, (HL)         CB 5E          12    z01-     // [HL] & {2^3}
bit  4, (HL)         CB 66          12    z01-     // [HL] & {2^4}
bit  5, (HL)         CB 6E          12    z01-     // [HL] & {2^5}
bit  6, (HL)         CB 76          12    z01-     // [HL] & {2^6}
bit  7, (HL)         CB 7E          12    z01-     // [HL] & {2^7}

set  0, B            CB C0           8    ----     // set bit 0 of register B
set  1, B            CB C8           8    ----     // set bit 1 of register B
set  2, B            CB D0           8    ----     // set bit 2 of register B
set  3, B            CB D8           8    ----     // set bit 3 of register B
set  4, B            CB E0           8    ----     // set bit 4 of register B
set  5, B            CB E8           8    ----     // set bit 5 of register B
set  6, B            CB F0           8    ----     // set bit 6 of register B
set  7, B            CB F8           8    ----     // set bit 7 of register B
set  0, C            CB C1           8    ----     // set bit 0 of register C
set  1, C            CB C9           8    ----     // set bit 1 of register C
set  2, C            CB D1           8    ----     // set bit 2 of register C
set  3, C            CB D9           8    ----     // set bit 3 of register C
set  4, C            CB E1           8    ----     // set bit 4 of register C
set  5, C            CB E9           8    ----     // set bit 5 of register C
set  6, C            CB F1           8    ----     // set bit 6 of register C
set  7, C            CB F9           8    ----     // set bit 7 of register C
set  0, D            CB C2           8    ----     // set bit 0 of register D
set  1, D            CB CA           8    ----     // set bit 1 of register D
set  2, D            CB D2           8    ----     // set bit 2 of register D
set  3, D            CB DA           8    ----     // set bit 3 of register D
set  4, D            CB E2           8    ----     // set bit 4 of register D
set  5, D            CB EA           8    ----     // set bit 5 of register D
set  6, D            CB F2           8    ----     // set bit 6 of register D
set  7, D            CB FA           8    ----     // set bit 7 of register D
set  0, E            CB C3           8    ----     // set bit 0 of register E
set  1, E            CB CB           8    ----     // set bit 1 of register E
set  2, E            CB D3           8    ----     // set bit 2 of register E
set  3, E            CB DB           8    ----     // set bit 3 of register E
set  4, E            CB E3           8    ----     // set bit 4 of register E
set  5, E            CB EB           8    ----     // set bit 5 of register E
set  6, E            CB F3           8    ----     // set bit 6 of register E
set  7, E            CB FB           8    ----     // set bit 7 of register E
set  0, H            CB C4           8    ----     // set bit 0 of register H
set  1, H            CB CC           8    ----     // set bit 1 of register H
set  2, H            CB D4           8    ----     // set bit 2 of register H
set  3, H            CB DC           8    ----     // set bit 3 of register H
set  4, H            CB E4           8    ----     // set bit 4 of register H
set  5, H            CB EC           8    ----     // set bit 5 of register H
set  6, H            CB F4           8    ----     // set bit 6 of register H
set  7, H            CB FC           8    ----     // set bit 7 of register H
set  0, L            CB C5           8    ----     // set bit 0 of register L
set  1, L            CB CD           8    ----     // set bit 1 of register L
set  2, L            CB D5           8    ----     // set bit 2 of register L
set  3, L            CB DD           8    ----     // set bit 3 of register L
set  4, L            CB E5           8    ----     // set bit 4 of register L
set  5, L            CB ED           8    ----     // set bit 5 of register L
set  6, L            CB F5           8    ----     // set bit 6 of register L
set  7, L            CB FD           8    ----     // set bit 7 of register L
set  0, A            CB C7           8    ----     // set bit 0 of register A
set  1, A            CB CF           8    ----     // set bit 1 of register A
set  2, A            CB D7           8    ----     // set bit 2 of register A
set  3, A            CB DF           8    ----     // set bit 3 of register A
set  4, A            CB E7           8    ----     // set bit 4 of register A
set  5, A            CB EF           8    ----     // set bit 5 of register A
set  6, A            CB F7           8    ----     // set bit 6 of register A
set  7, A            CB FF           8    ----     // set bit 7 of register A

set  0, (HL)         CB C6          16    ----     // set bit 0 of [HL]
set  1, (HL)         CB CE          16    ----     // set bit 1 of [HL]
set  2, (HL)         CB D6          16    ----     // set bit 2 of [HL]
set  3, (HL)         CB DE          16    ----     // set bit 3 of [HL]
set  4, (HL)         CB E6          16    ----     // set bit 4 of [HL]
set  5, (HL)         CB EE          16    ----     // set bit 5 of [HL]
set  6, (HL)         CB F6          16    ----     // set bit 6 of [HL]
set  7, (HL)         CB FE          16    ----     // set bit 7 of [HL]

res  0, B            CB 80           8    ----     // reset bit 0 of register B
res  1, B            CB 88           8    ----     // reset bit 1 of register B
res  2, B            CB 90           8    ----     // reset bit 2 of register B
res  3, B            CB 98           8    ----     // reset bit 3 of register B
res  4, B            CB A0           8    ----     // reset bit 4 of register B
res  5, B            CB A8           8    ----     // reset bit 5 of register B
res  6, B            CB B0           8    ----     // reset bit 6 of register B
res  7, B            CB B8           8    ----     // reset bit 7 of register B
res  0, C            CB 81           8    ----     // reset bit 0 of register C
res  1, C            CB 89           8    ----     // reset bit 1 of register C
res  2, C            CB 91           8    ----     // reset bit 2 of register C
res  3, C            CB 99           8    ----     // reset bit 3 of register C
res  4, C            CB A1           8    ----     // reset bit 4 of register C
res  5, C            CB A9           8    ----     // reset bit 5 of register C
res  6, C            CB B1           8    ----     // reset bit 6 of register C
res  7, C            CB B9           8    ----     // reset bit 7 of register C
res  0, D            CB 82           8    ----     // reset bit 0 of register D
res  1, D            CB 8A           8    ----     // reset bit 1 of register D
res  2, D            CB 92           8    ----     // reset bit 2 of register D
res  3, D            CB 9A           8    ----     // reset bit 3 of register D
res  4, D            CB A2           8    ----     // reset bit 4 of register D
res  5, D            CB AA           8    ----     // reset bit 5 of register D
res  6, D            CB B2           8    ----     // reset bit 6 of register D
res  7, D            CB BA           8    ----     // reset bit 7 of register D
res  0, E            CB 83           8    ----     // reset bit 0 of register E
res  1, E            CB 8B           8    ----     // reset bit 1 of register E
res  2, E            CB 93           8    ----     // reset bit 2 of register E
res  3, E            CB 9B           8    ----     // reset bit 3 of register E
res  4, E            CB A3           8    ----     // reset bit 4 of register E
res  5, E            CB AB           8    ----     // reset bit 5 of register E
res  6, E            CB B3           8    ----     // reset bit 6 of register E
res  7, E            CB BB           8    ----     // reset bit 7 of register E
res  0, H            CB 84           8    ----     // reset bit 0 of register H
res  1, H            CB 8C           8    ----     // reset bit 1 of register H
res  2, H            CB 94           8    ----     // reset bit 2 of register H
res  3, H            CB 9C           8    ----     // reset bit 3 of register H
res  4, H            CB A4           8    ----     // reset bit 4 of register H
res  5, H            CB AC           8    ----     // reset bit 5 of register H
res  6, H            CB B4           8    ----     // reset bit 6 of register H
res  7, H            CB BC           8    ----     // reset bit 7 of register H
res  0, L            CB 85           8    ----     // reset bit 0 of register L
res  1, L            CB 8D           8    ----     // reset bit 1 of register L
res  2, L            CB 95           8    ----     // reset bit 2 of register L
res  3, L            CB 9D           8    ----     // reset bit 3 of register L
res  4, L            CB A5           8    ----     // reset bit 4 of register L
res  5, L            CB AD           8    ----     // reset bit 5 of register L
res  6, L            CB B5           8    ----     // reset bit 6 of register L
res  7, L            CB BD           8    ----     // reset bit 7 of register L
res  0, A            CB 87           8    ----     // reset bit 0 of register A
res  1, A            CB 8F           8    ----     // reset bit 1 of register A
res  2, A            CB 97           8    ----     // reset bit 2 of register A
res  3, A            CB 9F           8    ----     // reset bit 3 of register A
res  4, A            CB A7           8    ----     // reset bit 4 of register A
res  5, A            CB AF           8    ----     // reset bit 5 of register A
res  6, A            CB B7           8    ----     // reset bit 6 of register A
res  7, A            CB BF           8    ----     // reset bit 7 of register A

res  0, (HL)         CB 86          16    ----     // reset bit 0 of [HL]
res  1, (HL)         CB 8E          16    ----     // reset bit 1 of [HL]
res  2, (HL)         CB 96          16    ----     // reset bit 2 of [HL]
res  3, (HL)         CB 9E          16    ----     // reset bit 3 of [HL]
res  4, (HL)         CB A6          16    ----     // reset bit 4 of [HL]
res  5, (HL)         CB AE          16    ----     // reset bit 5 of [HL]
res  6, (HL)         CB B6          16    ----     // reset bit 6 of [HL]
res  7, (HL)         CB BE          16    ----     // reset bit 7 of [HL]

ccf                  3F              4    -00c     // cy=cy xor 1
scf                  37              4    -001     // cy=1
nop                  00              4    ----     // no operation
halt                 76              1    ----     // halt until interrupt occurs (low power)
stop                 10 00           1    ----     // low power standby mode (VERY low power)
di                   F3              4    ----     // disable interrupts, IME=0
ei                   FB              4    ----     // enable interrupts, IME=1

jp   %2              C3             16    ----     // jump to %2, PC=%2
jp   HL              E9              4    ----     // jump to HL, PC=HL
jp   CY, %2          DA          16;12    ----     // conditional jump if CY 
jp   !CY, %2         D2          16;12    ----     // conditional jump if !CY
jp   !Z, %2          C2          16;12    ----     // conditional jump if !Z 
jp   Z, %2           CA          16;12    ----     // conditional jump if Z  

jr   PC+%s           18             12    ----     // relative jump to %s (PC=PC+/-7bit)
jr   CY, PC+%s       38           12;8    ----     // conditional relative jump if CY 
jr   !CY, PC+%s      30           12;8    ----     // conditional relative jump if !CY
jr   !Z, PC+%s       20           12;8    ----     // conditional relative jump if !Z 
jr   Z, PC+%s        28           12;8    ----     // conditional relative jump if Z 

call %2              CD             24    ----     // call to %2, SP=SP-2, (SP)=PC, PC=%2
call CY, %2          DC          24;12    ----     // conditional call if CY 
call !CY, %2         D4          24;12    ----     // conditional call if !CY
call !Z, %2          C4          24;12    ----     // conditional call if !Z 
call Z, %2           CC          24;12    ----     // conditional call if Z  

ret                  C9             16    ----     // return, PC=(SP), SP=SP+2
ret  CY              D8           20;8    ----     // conditional return if CY 
ret  !CY             D0           20;8    ----     // conditional return if !CY
ret  !Z              C0           20;8    ----     // conditional return if !Z 
ret  Z               C8           20;8    ----     // conditional return if Z  
reti                 D9             16    ----     // return and enable interrupts (IME=1)

rst  00              C7             16    ----     // call to 0x0000
rst  08              CF             16    ----     // call to 0x0008
rst  10              D7             16    ----     // call to 0x0010
rst  18              DF             16    ----     // call to 0x0018
rst  20              E7             16    ----     // call to 0x0020
rst  28              EF             16    ----     // call to 0x0028
rst  30              F7             16    ----     // call to 0x0030
rst  38              FF             16    ----     // call to 0x0038
