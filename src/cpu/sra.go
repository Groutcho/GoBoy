// this file is automatically generated by instruction_generator.py
package cpu

import . "memory"


// sra  B - shift B right arithmetic (b7=b7)
func xCB_28_sra() int {
	value := GetB()
	msb := GetBit(value, 7)

	SetFlagCy(GetBit(value, 0) == 1)

	value = value >> 1
	value = SetBit(value, 7, msb)

	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetB(value)

	return 2
}

// sra  C - shift C right arithmetic (b7=b7)
func xCB_29_sra() int {
	value := GetC()
	msb := GetBit(value, 7)

	SetFlagCy(GetBit(value, 0) == 1)

	value = value >> 1
	value = SetBit(value, 7, msb)

	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetC(value)

	return 2
}

// sra  D - shift D right arithmetic (b7=b7)
func xCB_2A_sra() int {
	value := GetD()
	msb := GetBit(value, 7)

	SetFlagCy(GetBit(value, 0) == 1)

	value = value >> 1
	value = SetBit(value, 7, msb)

	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetD(value)

	return 2
}

// sra  E - shift E right arithmetic (b7=b7)
func xCB_2B_sra() int {
	value := GetE()
	msb := GetBit(value, 7)

	SetFlagCy(GetBit(value, 0) == 1)

	value = value >> 1
	value = SetBit(value, 7, msb)

	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetE(value)

	return 2
}

// sra  H - shift H right arithmetic (b7=b7)
func xCB_2C_sra() int {
	value := GetH()
	msb := GetBit(value, 7)

	SetFlagCy(GetBit(value, 0) == 1)

	value = value >> 1
	value = SetBit(value, 7, msb)

	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetH(value)

	return 2
}

// sra  L - shift L right arithmetic (b7=b7)
func xCB_2D_sra() int {
	value := GetL()
	msb := GetBit(value, 7)

	SetFlagCy(GetBit(value, 0) == 1)

	value = value >> 1
	value = SetBit(value, 7, msb)

	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetL(value)

	return 2
}

// sra  (HL) - shift [HL] right arithmetic (b7=b7)
func xCB_2E_sra() int {
	value := Get(GetHL())
	msb := GetBit(value, 7)

	SetFlagCy(GetBit(value, 0) == 1)

	value = value >> 1
	value = SetBit(value, 7, msb)

	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	Set(GetHL(), value)

	return 4
}

// sra  A - shift A right arithmetic (b7=b7)
func xCB_2F_sra() int {
	value := GetA()
	msb := GetBit(value, 7)

	SetFlagCy(GetBit(value, 0) == 1)

	value = value >> 1
	value = SetBit(value, 7, msb)

	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetA(value)

	return 2
}

