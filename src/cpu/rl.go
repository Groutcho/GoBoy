// this file is automatically generated by instruction_generator.py
package cpu

import . "memory"


// rl   B - *rotate B left through carry
func xCB_10_rl() int {
	value := GetB()
	msb := GetBit(value, 7)

	value = value << 1
	value = SetBit(value, 0, uint8(GetFlagCyInt()))

	SetFlagCy(msb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetB(value)

	return 2
}

// rl   C - *rotate C left through carry
func xCB_11_rl() int {
	value := GetC()
	msb := GetBit(value, 7)

	value = value << 1
	value = SetBit(value, 0, uint8(GetFlagCyInt()))

	SetFlagCy(msb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetC(value)

	return 2
}

// rl   D - *rotate D left through carry
func xCB_12_rl() int {
	value := GetD()
	msb := GetBit(value, 7)

	value = value << 1
	value = SetBit(value, 0, uint8(GetFlagCyInt()))

	SetFlagCy(msb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetD(value)

	return 2
}

// rl   E - *rotate E left through carry
func xCB_13_rl() int {
	value := GetE()
	msb := GetBit(value, 7)

	value = value << 1
	value = SetBit(value, 0, uint8(GetFlagCyInt()))

	SetFlagCy(msb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetE(value)

	return 2
}

// rl   H - *rotate H left through carry
func xCB_14_rl() int {
	value := GetH()
	msb := GetBit(value, 7)

	value = value << 1
	value = SetBit(value, 0, uint8(GetFlagCyInt()))

	SetFlagCy(msb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetH(value)

	return 2
}

// rl   L - *rotate L left through carry
func xCB_15_rl() int {
	value := GetL()
	msb := GetBit(value, 7)

	value = value << 1
	value = SetBit(value, 0, uint8(GetFlagCyInt()))

	SetFlagCy(msb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetL(value)

	return 2
}

// rl   (HL) - *rotate [HL] left through carry
func xCB_16_rl() int {
	value := Get(GetHL())
	msb := GetBit(value, 7)

	value = value << 1
	value = SetBit(value, 0, uint8(GetFlagCyInt()))

	SetFlagCy(msb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	Set(GetHL(), value)

	return 4
}

// rl   A - *rotate A left through carry
func xCB_17_rl() int {
	value := GetA()
	msb := GetBit(value, 7)

	value = value << 1
	value = SetBit(value, 0, uint8(GetFlagCyInt()))

	SetFlagCy(msb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetA(value)

	return 2
}

