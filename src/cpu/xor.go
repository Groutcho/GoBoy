// this file is automatically generated by instruction_generator.py
package cpu

import . "memory"


// xor  B - A=A^B
func xA8_xor() int {
	result := GetA() ^ GetB()
	SetA(result)

	SetFlags(int(result), F_SET_IF, F_SET_0, F_SET_0, F_SET_0, F_8bit)

	return 1
}

// xor  C - A=A^C
func xA9_xor() int {
	result := GetA() ^ GetC()
	SetA(result)

	SetFlags(int(result), F_SET_IF, F_SET_0, F_SET_0, F_SET_0, F_8bit)

	return 1
}

// xor  D - A=A^D
func xAA_xor() int {
	result := GetA() ^ GetD()
	SetA(result)

	SetFlags(int(result), F_SET_IF, F_SET_0, F_SET_0, F_SET_0, F_8bit)

	return 1
}

// xor  E - A=A^E
func xAB_xor() int {
	result := GetA() ^ GetE()
	SetA(result)

	SetFlags(int(result), F_SET_IF, F_SET_0, F_SET_0, F_SET_0, F_8bit)

	return 1
}

// xor  H - A=A^H
func xAC_xor() int {
	result := GetA() ^ GetH()
	SetA(result)

	SetFlags(int(result), F_SET_IF, F_SET_0, F_SET_0, F_SET_0, F_8bit)

	return 1
}

// xor  L - A=A^L
func xAD_xor() int {
	result := GetA() ^ GetL()
	SetA(result)

	SetFlags(int(result), F_SET_IF, F_SET_0, F_SET_0, F_SET_0, F_8bit)

	return 1
}

// xor  (HL) - A=A^[HL]
func xAE_xor() int {
	result := GetA() ^ Get(GetHL())
	SetA(result)

	SetFlags(int(result), F_SET_IF, F_SET_0, F_SET_0, F_SET_0, F_8bit)

	return 2
}

// xor  A - A=A^A
func xAF_xor() int {
	result := GetA() ^ GetA()
	SetA(result)

	SetFlags(int(result), F_SET_IF, F_SET_0, F_SET_0, F_SET_0, F_8bit)

	return 1
}

// xor  %1 - A=A^%1
func xEE_xor() int {
	result := GetA() ^ FetchOperand8()
	SetA(result)

	SetFlags(int(result), F_SET_IF, F_SET_0, F_SET_0, F_SET_0, F_8bit)

	return 2
}

