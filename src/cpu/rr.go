// this file is automatically generated by instruction_generator.py
package cpu

import . "common"
import . "memory"

// rr   B - *rotate B right through carry
func xCB_18_rr() int {
	value := GetB()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, uint8(GetFlagCyInt()))

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetB(value)

	return 2
}

// rr   C - *rotate C right through carry
func xCB_19_rr() int {
	value := GetC()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, uint8(GetFlagCyInt()))

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetC(value)

	return 2
}

// rr   D - *rotate D right through carry
func xCB_1A_rr() int {
	value := GetD()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, uint8(GetFlagCyInt()))

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetD(value)

	return 2
}

// rr   E - *rotate E right through carry
func xCB_1B_rr() int {
	value := GetE()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, uint8(GetFlagCyInt()))

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetE(value)

	return 2
}

// rr   H - *rotate H right through carry
func xCB_1C_rr() int {
	value := GetH()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, uint8(GetFlagCyInt()))

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetH(value)

	return 2
}

// rr   L - *rotate L right through carry
func xCB_1D_rr() int {
	value := GetL()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, uint8(GetFlagCyInt()))

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetL(value)

	return 2
}

// rr   (HL) - *rotate [HL] right through carry
func xCB_1E_rr() int {
	value := Get(GetHL())
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, uint8(GetFlagCyInt()))

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	Write(GetHL(), value)

	return 4
}

// rr   A - *rotate A right through carry
func xCB_1F_rr() int {
	value := GetA()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, uint8(GetFlagCyInt()))

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetA(value)

	return 2
}

