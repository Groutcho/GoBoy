// this file is automatically generated by instruction_generator.py
package cpu

import . "common"
import . "memory"

// rrc  B - *rotate B right
func xCB_08_rrc() int {
	value := GetB()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, lsb)

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetB(value)

	return 2
}

// rrc  C - *rotate C right
func xCB_09_rrc() int {
	value := GetC()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, lsb)

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetC(value)

	return 2
}

// rrc  D - *rotate D right
func xCB_0A_rrc() int {
	value := GetD()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, lsb)

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetD(value)

	return 2
}

// rrc  E - *rotate E right
func xCB_0B_rrc() int {
	value := GetE()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, lsb)

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetE(value)

	return 2
}

// rrc  H - *rotate H right
func xCB_0C_rrc() int {
	value := GetH()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, lsb)

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetH(value)

	return 2
}

// rrc  L - *rotate L right
func xCB_0D_rrc() int {
	value := GetL()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, lsb)

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetL(value)

	return 2
}

// rrc  (HL) - *rotate [HL] right
func xCB_0E_rrc() int {
	value := Get(GetHL())
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, lsb)

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	Set(GetHL(), value)

	return 4
}

// rrc  A - *rotate A right
func xCB_0F_rrc() int {
	value := GetA()
	lsb := GetBit(value, 0)

	value = value >> 1
	value = SetBit(value, 7, lsb)

	SetFlagCy(lsb == 1)
	SetFlagZf(value == 0)
	SetFlagN(false)
	SetFlagH(false)

	SetA(value)

	return 2
}

