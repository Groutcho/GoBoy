// this package is automatically generated by instruction_generator.py
package cpu

import . "memory"


// add  A, B - A=A+B
func x80_add() int {
	left := GetA()
    right := GetB()
    result := int(left) + int(right)

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// add  A, C - A=A+C
func x81_add() int {
	left := GetA()
    right := GetC()
    result := int(left) + int(right)

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// add  A, D - A=A+D
func x82_add() int {
	left := GetA()
    right := GetD()
    result := int(left) + int(right)

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// add  A, E - A=A+E
func x83_add() int {
	left := GetA()
    right := GetE()
    result := int(left) + int(right)

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// add  A, H - A=A+H
func x84_add() int {
	left := GetA()
    right := GetH()
    result := int(left) + int(right)

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// add  A, L - A=A+L
func x85_add() int {
	left := GetA()
    right := GetL()
    result := int(left) + int(right)

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// add  A, (HL) - A=A+(HL)
func x86_add() int {
	left := GetA()
    right := Get(GetHL())
    result := int(left) + int(right)

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 2
}

// add  A, A - A=A+A
func x87_add() int {
	left := GetA()
    right := GetA()
    result := int(left) + int(right)

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// add  A, %1 - A=A+%1
func xC6_add() int {
	left := GetA()
    right := FetchOperand8()
    result := int(left) + int(right)

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 2
}

// add  HL, BC - HL = HL+BC
func x09_add() int {
	left := GetHL()
    right := GetBC()
    result := int(left) + int(right)

    SetHL(uint16(result))
    hcarry := IsAddHalfCarry(getHighBits(left), getHighBits(right))
    SetFlags(result, F_IGNORE, F_SET_0, hcarry, F_SET_IF, F_16bit)

	return 2
}

// add  HL, DE - HL = HL+DE
func x19_add() int {
	left := GetHL()
    right := GetDE()
    result := int(left) + int(right)

    SetHL(uint16(result))
    hcarry := IsAddHalfCarry(getHighBits(left), getHighBits(right))
    SetFlags(result, F_IGNORE, F_SET_0, hcarry, F_SET_IF, F_16bit)

	return 2
}

// add  HL, HL - HL = HL+HL
func x29_add() int {
	left := GetHL()
    right := GetHL()
    result := int(left) + int(right)

    SetHL(uint16(result))
    hcarry := IsAddHalfCarry(getHighBits(left), getHighBits(right))
    SetFlags(result, F_IGNORE, F_SET_0, hcarry, F_SET_IF, F_16bit)

	return 2
}

// add  HL, SP - HL = HL+SP
func x39_add() int {
	left := GetHL()
    right := GetSP()
    result := int(left) + int(right)

    SetHL(uint16(result))
    hcarry := IsAddHalfCarry(getHighBits(left), getHighBits(right))
    SetFlags(result, F_IGNORE, F_SET_0, hcarry, F_SET_IF, F_16bit)

	return 2
}

// add  SP, %s - *SP = SP +/- %s ;%s is 8bit signed number
func xE8_add() int {
	left := GetSP()
    right := FetchOperand8()
    result := int(left) + int(right)

    SetSP(uint16(result))
    hcarry := IsAddHalfCarry(getHighBits(left), right)
    SetFlags(result, F_IGNORE, F_SET_0, hcarry, F_SET_IF, F_16bit)

	return 4
}

