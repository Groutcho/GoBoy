// this file is automatically generated by instruction_generator.py
package cpu

import . "memory"


// sub  A, B - A=A-B
func x90_sub() int {
	left := GetA()
	right := GetB()
	result := int(left) - int(right)

	SetA(uint8(result))
	hcarry := IsSubHalfCarry(left, right)
	SetFlags(result, F_SET_IF, F_SET_1, hcarry, F_SET_IF, F_8bit)

	return 1
}

// sub  A, C - A=A-C
func x91_sub() int {
	left := GetA()
	right := GetC()
	result := int(left) - int(right)

	SetA(uint8(result))
	hcarry := IsSubHalfCarry(left, right)
	SetFlags(result, F_SET_IF, F_SET_1, hcarry, F_SET_IF, F_8bit)

	return 1
}

// sub  A, D - A=A-D
func x92_sub() int {
	left := GetA()
	right := GetD()
	result := int(left) - int(right)

	SetA(uint8(result))
	hcarry := IsSubHalfCarry(left, right)
	SetFlags(result, F_SET_IF, F_SET_1, hcarry, F_SET_IF, F_8bit)

	return 1
}

// sub  A, E - A=A-E
func x93_sub() int {
	left := GetA()
	right := GetE()
	result := int(left) - int(right)

	SetA(uint8(result))
	hcarry := IsSubHalfCarry(left, right)
	SetFlags(result, F_SET_IF, F_SET_1, hcarry, F_SET_IF, F_8bit)

	return 1
}

// sub  A, H - A=A-H
func x94_sub() int {
	left := GetA()
	right := GetH()
	result := int(left) - int(right)

	SetA(uint8(result))
	hcarry := IsSubHalfCarry(left, right)
	SetFlags(result, F_SET_IF, F_SET_1, hcarry, F_SET_IF, F_8bit)

	return 1
}

// sub  A, L - A=A-L
func x95_sub() int {
	left := GetA()
	right := GetL()
	result := int(left) - int(right)

	SetA(uint8(result))
	hcarry := IsSubHalfCarry(left, right)
	SetFlags(result, F_SET_IF, F_SET_1, hcarry, F_SET_IF, F_8bit)

	return 1
}

// sub  A, (HL) - A=A-(HL)
func x96_sub() int {
	left := GetA()
	right := Get(GetHL())
	result := int(left) - int(right)

	SetA(uint8(result))
	hcarry := IsSubHalfCarry(left, right)
	SetFlags(result, F_SET_IF, F_SET_1, hcarry, F_SET_IF, F_8bit)

	return 2
}

// sub  A, A - A=A-A
func x97_sub() int {
	left := GetA()
	right := GetA()
	result := int(left) - int(right)

	SetA(uint8(result))
	hcarry := IsSubHalfCarry(left, right)
	SetFlags(result, F_SET_IF, F_SET_1, hcarry, F_SET_IF, F_8bit)

	return 1
}

// sub  A, %1 - A=A-%1
func xD6_sub() int {
	left := GetA()
	right := FetchOperand8()
	result := int(left) - int(right)

	SetA(uint8(result))
	hcarry := IsSubHalfCarry(left, right)
	SetFlags(result, F_SET_IF, F_SET_1, hcarry, F_SET_IF, F_8bit)

	return 2
}

