// this file is automatically generated by instruction_generator.py
package cpu

import . "memory"


// adc  A, B - A=A+B+cy
func x88_adc() int {
	left := GetA()
    right := GetB()
    result := int(left) + int(right) + GetFlagCyInt()

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// adc  A, C - A=A+C+cy
func x89_adc() int {
	left := GetA()
    right := GetC()
    result := int(left) + int(right) + GetFlagCyInt()

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// adc  A, D - A=A+D+cy
func x8A_adc() int {
	left := GetA()
    right := GetD()
    result := int(left) + int(right) + GetFlagCyInt()

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// adc  A, E - A=A+E+cy
func x8B_adc() int {
	left := GetA()
    right := GetE()
    result := int(left) + int(right) + GetFlagCyInt()

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// adc  A, H - A=A+H+cy
func x8C_adc() int {
	left := GetA()
    right := GetH()
    result := int(left) + int(right) + GetFlagCyInt()

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// adc  A, L - A=A+L+cy
func x8D_adc() int {
	left := GetA()
    right := GetL()
    result := int(left) + int(right) + GetFlagCyInt()

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// adc  A, (HL) - A=A+(HL)+cy
func x8E_adc() int {
	left := GetA()
    right := Get(GetHL())
    result := int(left) + int(right) + GetFlagCyInt()

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 2
}

// adc  A, A - A=A+A+cy
func x8F_adc() int {
	left := GetA()
    right := GetA()
    result := int(left) + int(right) + GetFlagCyInt()

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 1
}

// adc  A, %1 - A=A+%1+cy
func xCE_adc() int {
	left := GetA()
    right := FetchOperand8()
    result := int(left) + int(right) + GetFlagCyInt()

    SetA(uint8(result))
    hcarry := IsAddHalfCarry(left, right)
    SetFlags(result, F_SET_IF, F_SET_0, hcarry, F_SET_IF, F_8bit)

	return 2
}

