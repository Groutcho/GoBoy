// this file is automatically generated by instruction_generator.py
package cpu

import . "memory"

// cp   B - compare A-B
func xB8_cp() int {
	left := int(GetA())
	right := int(GetB())
	result := left - right
	SetA(uint8(result))

	hc := IsSubHalfCarry(uint8(left), uint8(right))

	SetFlags(result, F_SET_IF, F_SET_1, hc, F_SET_IF, F_8bit)

	return 1
}

// cp   C - compare A-C
func xB9_cp() int {
	left := int(GetA())
	right := int(GetC())
	result := left - right
	SetA(uint8(result))

	hc := IsSubHalfCarry(uint8(left), uint8(right))

	SetFlags(result, F_SET_IF, F_SET_1, hc, F_SET_IF, F_8bit)

	return 1
}

// cp   D - compare A-D
func xBA_cp() int {
	left := int(GetA())
	right := int(GetD())
	result := left - right
	SetA(uint8(result))

	hc := IsSubHalfCarry(uint8(left), uint8(right))

	SetFlags(result, F_SET_IF, F_SET_1, hc, F_SET_IF, F_8bit)

	return 1
}

// cp   E - compare A-E
func xBB_cp() int {
	left := int(GetA())
	right := int(GetE())
	result := left - right
	SetA(uint8(result))

	hc := IsSubHalfCarry(uint8(left), uint8(right))

	SetFlags(result, F_SET_IF, F_SET_1, hc, F_SET_IF, F_8bit)

	return 1
}

// cp   H - compare A-H
func xBC_cp() int {
	left := int(GetA())
	right := int(GetH())
	result := left - right
	SetA(uint8(result))

	hc := IsSubHalfCarry(uint8(left), uint8(right))

	SetFlags(result, F_SET_IF, F_SET_1, hc, F_SET_IF, F_8bit)

	return 1
}

// cp   L - compare A-L
func xBD_cp() int {
	left := int(GetA())
	right := int(GetL())
	result := left - right
	SetA(uint8(result))

	hc := IsSubHalfCarry(uint8(left), uint8(right))

	SetFlags(result, F_SET_IF, F_SET_1, hc, F_SET_IF, F_8bit)

	return 1
}

// cp   (HL) - compare A-(HL)
func xBE_cp() int {
	left := int(GetA())
	right := int(Get(GetHL()))
	result := left - right
	SetA(uint8(result))

	hc := IsSubHalfCarry(uint8(left), uint8(right))

	SetFlags(result, F_SET_IF, F_SET_1, hc, F_SET_IF, F_8bit)

	return 2
}

// cp   A - compare A-A
func xBF_cp() int {
	left := int(GetA())
	right := int(GetA())
	result := left - right
	SetA(uint8(result))

	hc := IsSubHalfCarry(uint8(left), uint8(right))

	SetFlags(result, F_SET_IF, F_SET_1, hc, F_SET_IF, F_8bit)

	return 1
}

// cp   %1 - compare A-%1
func xFE_cp() int {
	left := int(GetA())
	right := int(FetchOperand8())
	result := left - right
	SetA(uint8(result))

	hc := IsSubHalfCarry(uint8(left), uint8(right))

	SetFlags(result, F_SET_IF, F_SET_1, hc, F_SET_IF, F_8bit)

	return 2
}

